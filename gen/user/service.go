// Code generated by goa v3.13.2, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen UserApi

package user

import (
	"context"

	"goa.design/goa/v3/security"
)

// CRUD for users
type Service interface {
	// Create implements create.
	Create(context.Context, *CreatePayload) (res string, err error)
	// Read implements read.
	Read(context.Context, *ReadPayload) (res string, err error)
	// Update implements update.
	Update(context.Context, *UpdatePayload) (res string, err error)
	// Delete implements delete.
	Delete(context.Context, *DeletePayload) (res string, err error)
	// Token implements token.
	Token(context.Context, *TokenPayload) (res string, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"create", "read", "update", "delete", "token"}

// Create user
type CreatePayload struct {
	// User's email address
	Email *string
	// User's password
	Password *string
}

// DeletePayload is the payload type of the user service delete method.
type DeletePayload struct {
	// JWT token
	JWT *string
	// Delete id
	ID *uint
}

// ReadPayload is the payload type of the user service read method.
type ReadPayload struct {
	// JWT token
	JWT *string
}

// Get token
type TokenPayload struct {
	// User's email address
	Email *string
	// User's password
	Password *string
}

// Create user
type UpdatePayload struct {
	// JWT token
	JWT *string
	// User name
	Name *string
	// User surname
	Surname *string
	// User address
	Address *string
	// phone
	Phone *string
}
