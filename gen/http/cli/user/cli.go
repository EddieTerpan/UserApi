// Code generated by goa v3.13.2, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen UserApi

package cli

import (
	userc "UserApi/gen/http/user/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `user (create|read|update|delete|token)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user create --body '{
      "email": "meridamotore@gmail.com",
      "password": "MyP@ssw0rd"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		userCreateBodyFlag = userCreateFlags.String("body", "REQUIRED", "")

		userReadFlags   = flag.NewFlagSet("read", flag.ExitOnError)
		userReadJWTFlag = userReadFlags.String("jwt", "", "")

		userUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		userUpdateBodyFlag = userUpdateFlags.String("body", "REQUIRED", "")
		userUpdateJWTFlag  = userUpdateFlags.String("jwt", "", "")

		userDeleteFlags    = flag.NewFlagSet("delete", flag.ExitOnError)
		userDeleteBodyFlag = userDeleteFlags.String("body", "REQUIRED", "")
		userDeleteJWTFlag  = userDeleteFlags.String("jwt", "", "")

		userTokenFlags    = flag.NewFlagSet("token", flag.ExitOnError)
		userTokenBodyFlag = userTokenFlags.String("body", "REQUIRED", "")
	)
	userFlags.Usage = userUsage
	userCreateFlags.Usage = userCreateUsage
	userReadFlags.Usage = userReadUsage
	userUpdateFlags.Usage = userUpdateUsage
	userDeleteFlags.Usage = userDeleteUsage
	userTokenFlags.Usage = userTokenUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "user":
			switch epn {
			case "create":
				epf = userCreateFlags

			case "read":
				epf = userReadFlags

			case "update":
				epf = userUpdateFlags

			case "delete":
				epf = userDeleteFlags

			case "token":
				epf = userTokenFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = userc.BuildCreatePayload(*userCreateBodyFlag)
			case "read":
				endpoint = c.Read()
				data, err = userc.BuildReadPayload(*userReadJWTFlag)
			case "update":
				endpoint = c.Update()
				data, err = userc.BuildUpdatePayload(*userUpdateBodyFlag, *userUpdateJWTFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = userc.BuildDeletePayload(*userDeleteBodyFlag, *userDeleteJWTFlag)
			case "token":
				endpoint = c.Token()
				data, err = userc.BuildTokenPayload(*userTokenBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `CRUD for users
Usage:
    %[1]s [globalflags] user COMMAND [flags]

COMMAND:
    create: Create implements create.
    read: Read implements read.
    update: Update implements update.
    delete: Delete implements delete.
    token: Token implements token.

Additional help:
    %[1]s user COMMAND --help
`, os.Args[0])
}
func userCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user create -body JSON

Create implements create.
    -body JSON: 

Example:
    %[1]s user create --body '{
      "email": "meridamotore@gmail.com",
      "password": "MyP@ssw0rd"
   }'
`, os.Args[0])
}

func userReadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user read -jwt STRING

Read implements read.
    -jwt STRING: 

Example:
    %[1]s user read --jwt "Fuga cumque rerum at."
`, os.Args[0])
}

func userUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user update -body JSON -jwt STRING

Update implements update.
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s user update --body '{
      "address": "Ea ex.",
      "name": "Autem dolores nihil aperiam.",
      "phone": "Consequatur a.",
      "surname": "Et cupiditate consectetur ullam ullam sed pariatur."
   }' --jwt "Aut provident ducimus impedit."
`, os.Args[0])
}

func userDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user delete -body JSON -jwt STRING

Delete implements delete.
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s user delete --body '{
      "id": 3314748119486640210
   }' --jwt "Qui itaque eos perspiciatis repellendus."
`, os.Args[0])
}

func userTokenUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user token -body JSON

Token implements token.
    -body JSON: 

Example:
    %[1]s user token --body '{
      "email": "meridamotore@gmail.com",
      "password": "MyP@ssw0rd"
   }'
`, os.Args[0])
}
