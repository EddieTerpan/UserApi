// Code generated by goa v3.13.2, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen UserApi

package client

import (
	user "UserApi/gen/user"
)

// CreateRequestBody is the type of the "user" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// UpdateRequestBody is the type of the "user" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// User name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// User surname
	Surname *string `form:"surname,omitempty" json:"surname,omitempty" xml:"surname,omitempty"`
	// User address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// phone
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
}

// DeleteRequestBody is the type of the "user" service "delete" endpoint HTTP
// request body.
type DeleteRequestBody struct {
	// Delete id
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// TokenRequestBody is the type of the "user" service "token" endpoint HTTP
// request body.
type TokenRequestBody struct {
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "user" service.
func NewCreateRequestBody(p *user.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "user" service.
func NewUpdateRequestBody(p *user.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:    p.Name,
		Surname: p.Surname,
		Address: p.Address,
		Phone:   p.Phone,
	}
	return body
}

// NewDeleteRequestBody builds the HTTP request body from the payload of the
// "delete" endpoint of the "user" service.
func NewDeleteRequestBody(p *user.DeletePayload) *DeleteRequestBody {
	body := &DeleteRequestBody{
		ID: p.ID,
	}
	return body
}

// NewTokenRequestBody builds the HTTP request body from the payload of the
// "token" endpoint of the "user" service.
func NewTokenRequestBody(p *user.TokenPayload) *TokenRequestBody {
	body := &TokenRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}
