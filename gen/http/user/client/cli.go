// Code generated by goa v3.13.2, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen UserApi

package client

import (
	user "UserApi/gen/user"
	"encoding/json"
	"fmt"
)

// BuildCreatePayload builds the payload for the user create endpoint from CLI
// flags.
func BuildCreatePayload(userCreateBody string) (*user.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(userCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"meridamotore@gmail.com\",\n      \"password\": \"MyP@ssw0rd\"\n   }'")
		}
	}
	v := &user.CreatePayload{
		Email:    body.Email,
		Password: body.Password,
	}

	return v, nil
}

// BuildReadPayload builds the payload for the user read endpoint from CLI
// flags.
func BuildReadPayload(userReadJWT string) (*user.ReadPayload, error) {
	var jwt *string
	{
		if userReadJWT != "" {
			jwt = &userReadJWT
		}
	}
	v := &user.ReadPayload{}
	v.JWT = jwt

	return v, nil
}

// BuildUpdatePayload builds the payload for the user update endpoint from CLI
// flags.
func BuildUpdatePayload(userUpdateBody string, userUpdateJWT string) (*user.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(userUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": \"Ea ex.\",\n      \"name\": \"Autem dolores nihil aperiam.\",\n      \"phone\": \"Consequatur a.\",\n      \"surname\": \"Et cupiditate consectetur ullam ullam sed pariatur.\"\n   }'")
		}
	}
	var jwt *string
	{
		if userUpdateJWT != "" {
			jwt = &userUpdateJWT
		}
	}
	v := &user.UpdatePayload{
		Name:    body.Name,
		Surname: body.Surname,
		Address: body.Address,
		Phone:   body.Phone,
	}
	v.JWT = jwt

	return v, nil
}

// BuildDeletePayload builds the payload for the user delete endpoint from CLI
// flags.
func BuildDeletePayload(userDeleteBody string, userDeleteJWT string) (*user.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(userDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 3314748119486640210\n   }'")
		}
	}
	var jwt *string
	{
		if userDeleteJWT != "" {
			jwt = &userDeleteJWT
		}
	}
	v := &user.DeletePayload{
		ID: body.ID,
	}
	v.JWT = jwt

	return v, nil
}

// BuildTokenPayload builds the payload for the user token endpoint from CLI
// flags.
func BuildTokenPayload(userTokenBody string) (*user.TokenPayload, error) {
	var err error
	var body TokenRequestBody
	{
		err = json.Unmarshal([]byte(userTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"meridamotore@gmail.com\",\n      \"password\": \"MyP@ssw0rd\"\n   }'")
		}
	}
	v := &user.TokenPayload{
		Email:    body.Email,
		Password: body.Password,
	}

	return v, nil
}
